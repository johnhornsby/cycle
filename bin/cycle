#!/usr/bin/env node

'use strict';

var fs = require('fs'),
	path = require('path'),
	colors = require('colors'),
	ncp = require('ncp');


process.title = 'cycle';
console.log("[" + "cycle".green + "] Launching..");

// Crude mechanism to stop grunt exiting before tasks are completed
global.completeCount = 0

// Store our current project directory
var cwd = process.cwd();
global.cyclecwd = cwd;

// Locate our cycle grunt folder
var cycleFolder = path.join(__dirname, '../');
global.cycleFolder = cycleFolder;

process.chdir(cycleFolder);

// Are we requesting a scaffold setup?
if (process.argv.length >= 3 && process.argv[2] == 'setup') 
{
	console.log("[" + "cycle".green + "] Setting up project scaffold..");
	
	ncp(path.join(cycleFolder, 'setup'), cwd, function (err) {
		if (err)
			return console.error("[" + "cycle".green + "] Unable to setup scaffold - " + err[0].message.red);

		console.log("[" + "cycle".green + "] Done!");
	});
}
else
{
	// Load our local utilities
	global.configutil = require('../util/config');
	global.loghook = require('../util/loghook');
	global.taskloader = require('../util/taskloader');
	global.tfshook = require('../util/tfs');

	// Make sure our end tasks are executed
	if (isSpecificLaunch())
		process.argv = process.argv.concat(['task-waitexit']);

	// Require and run grunt
	require('grunt').cli();
}

// Determines whether specific tasks have been provided to launch
function isSpecificLaunch() {
	if (process.argv.length === 2)
		return false;

	// Check whether they're all arguments
	var taskArg = false;

	process.argv.forEach(function (taskName, idx) {
		if (idx > 1 && taskName[0] !== '-')
			taskArg = true;
	});

	return taskArg;
}
